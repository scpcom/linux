// SPDX-License-Identifier: GPL-2.0
/dts-v1/;
#include "ls1024a.dtsi"
#include <dt-bindings/gpio/gpio.h>
#include <dt-bindings/input/linux-event-codes.h>
#include <dt-bindings/leds/common.h>

/ {
	model = "Zyxel NAS5xx";
	compatible = "zyxel,nas5xx", "fsl,ls1024a";

	chosen {
		bootargs = "console=ttyS0,115200n8 earlyprintk";
		stdout-path = &uart1;
	};

	reserved-memory {
		#address-cells = <1>;
		#size-cells = <1>;

		pfe@3400000 {
			reg = <0x03400000 0xc00000>;
			no-map;
		};
	};

	a9dp_opp_table: a9dp_opp_table {
		compatible = "operating-points-v2";
		opp-shared;

		opp-1200000000 {
			opp-hz = /bits/ 64 <1200000000>;
		};
		opp-600000000 {
			opp-hz = /bits/ 64 <600000000>;
		};
		opp-300000000 {
			opp-hz = /bits/ 64 <300000000>;
		};
	};

	soc {
		poweroff {
			compatible = "gpio-poweroff";
			gpios = <&gpio 15 GPIO_ACTIVE_HIGH>;
			timeout-ms = <6000>;
		};

		pfe_ctrl: pfe_ctrl@90500000 {
			compatible = "fsl,ls1024a-pfe-ctrl";
			reg = <0x90500000 0x10000>,
			      <0x9c000000 0x1000000>,
			      <0x03400000 0xc00000>,
			      <0x83000000 0x2000>,
			      <0x9a000000 0x100000>;
			reg-names = "apb", "axi", "ddr", "iram", "ipsec";
			interrupts = <GIC_SPI 4 IRQ_TYPE_LEVEL_HIGH>;
			interrupt-names = "hif";
			clocks = <&clkcore LS1024A_CLK_PFE_SYS>,
				 <&clkcore LS1024A_CLK_GEM_TX>;
			clock-names = "axi", "gemtx";
			resets = <&clkreset LS1024A_AXI_PFE_SYS_RST>,
			         <&clkreset LS1024A_AXI_IPSEC_EAPE_RST>;
			reset-names = "axi", "ipsec";
		};
	};

	control: control {
		compatible = "zyxel,nas-control";
		gpios = <&gpio 0 GPIO_ACTIVE_LOW>,
			<&gpio 1 GPIO_ACTIVE_LOW>,
			<&gpio 2 GPIO_ACTIVE_LOW>,
			<&gpio 3 GPIO_ACTIVE_LOW>,
			<&gpio 7 GPIO_ACTIVE_HIGH>,
			<&gpio 8 GPIO_ACTIVE_HIGH>,
			<&gpio 9 GPIO_ACTIVE_HIGH>,
			<&gpio 10 GPIO_ACTIVE_HIGH>,
			<&gpio 11 GPIO_ACTIVE_HIGH>,
			<&gpio 14 GPIO_ACTIVE_HIGH>;
		gpio-names = "hdd1-detect", "hdd2-detect", "hdd3-detect", "hdd4-detect", "htp-detect",
			     "hdd1-control", "hdd2-control", "hdd3-control", "hdd4-control", "usb-control";
	};

	ledtriggers {
		compatible = "zyxel,nas-leds";
	};

	pwmset {
		compatible = "zyxel,nas-pwms";
		//pwms = <&pwm 4 5000 0>, <&pwm 5 65536 0>;
	};

	keys {
		compatible = "zyxel,nas-keys";
		#address-cells = <1>;
		#size-cells = <0>;
		autorepeat;

		button@0 {
			gpios = <&gpio 4 GPIO_ACTIVE_HIGH>;
			linux,code = <KEY_POWER>;
			label = "GPIO Key Power";
			linux,input-type = <1>;
			gpio-key,wakeup = <1>;
			debounce-interval = <100>;
		};
		button@1 {
			gpios = <&gpio 5 GPIO_ACTIVE_LOW>;
			linux,code = <KEY_RESTART>;
			label = "GPIO Key Reset";
			linux,input-type = <1>;
			gpio-key,wakeup = <1>;
			debounce-interval = <100>;
		};
		button@2 {
			gpios = <&gpio 6 GPIO_ACTIVE_LOW>;
			linux,code = <KEY_PROG1>;
			label = "GPIO Key Copy";
			linux,input-type = <1>;
			gpio-key,wakeup = <1>;
			debounce-interval = <100>;
		};
	};

	leds {
		compatible = "gpio-leds";
		hdd1-green {
			gpios = <&gpio 48 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "hdd1-act";
		};
		hdd1-red {
			gpios = <&gpio 49 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "hdd1-err";
		};
		hdd2-green {
			gpios = <&gpio 50 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "hdd2-act";
		};
		hdd2-red {
			gpios = <&gpio 51 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "hdd2-err";
		};
		hdd3-green {
			gpios = <&gpio 52 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "hdd3-act";
		};
		hdd3-red {
			gpios = <&gpio 53 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "hdd3-err";
		};
		hdd4-green {
			gpios = <&gpio 54 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "hdd4-act";
		};
		hdd4-red {
			gpios = <&gpio 55 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "hdd4-err";
		};
		sys-green {
			function = LED_FUNCTION_STATUS;
			color = <LED_COLOR_ID_GREEN>;
			gpios = <&gpio 56 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "sys-act";
		};
		sys-red {
			function = LED_FUNCTION_STATUS;
			color = <LED_COLOR_ID_RED>;
			gpios = <&gpio 57 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "sys-err";
		};
		copy-green {
			gpios = <&gpio 58 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "copy-act";
		};
		copy-red {
			gpios = <&gpio 59 GPIO_ACTIVE_HIGH>;
			linux,default-trigger = "copy-err";
		};
	};

	nas-mcu {
		compatible = "zyxel,nas-mcu";
		gpios = <&gpio 35 GPIO_ACTIVE_HIGH>,
			<&gpio 36 GPIO_ACTIVE_HIGH>,
			<&gpio 37 GPIO_ACTIVE_HIGH>,
			<&gpio 38 GPIO_ACTIVE_HIGH>,
			<&gpio 39 GPIO_ACTIVE_HIGH>;
		gpio-names = "sdata", "sclk", "resb", "bi", "wdt";
	};
};

&cpu0 {
	operating-points-v2 = <&a9dp_opp_table>;
};
&cpu1 {
	operating-points-v2 = <&a9dp_opp_table>;
};

&i2c {
	clock-frequency = <400000>;
	status = "okay";

	sensors@a {
		compatible = "zyxel,sensors";
		reg = <0x0a>;
	};

	ds1340: rtc@68 {
		/* compatible = "dallas,ds1340"; */
		compatible = "zyxel,rtc";
		reg = <0x68>;
	};
};

&serdes1 {
	fsl,sata-txlev = <15>;
};

&serdes2 {
	fsl,sata-txlev = <15>;
};

&uart0 {
	status = "disabled";

	/* uart0 pins are used for hdd control */
};
&uart1 {
	status = "okay";

	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_uart1>;
};

&ls_spi {
	num-cs = <1>;
	/* Using a GPIO line is a workaround to enable the driver to really
	 * handle the chip select line. Otherwise, the controller releases the
	 * chip select as soon as the Tx FIFO is empty, which happens too
	 * quickly with a Tx FIFO depth of 8 words.
	 */
	cs-gpios = <&gpio 18 GPIO_ACTIVE_LOW>;
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_spi_ls>;
	status = "okay";

	flash@0 {
		#address-cells = <1>;
		#size-cells = <1>;
		compatible = "macronix,mx25l8005", "st,m25p80", "jedec,spi-nor", "spidev";
		reg = <0>;
		spi-max-frequency = <4000000>;
		spi-cpha;
		spi-cpol;
		mode = <0>;

		partition@0 {
			reg = <0x00000 0x40000>;
			label = "uloader";
		};

		partition@40000 {
			reg = <0x40000 0x80000>;
			label = "barebox";
		};

		partition@c0000 {
			reg = <0xc0000 0x40000>;
			label = "env";
		};
	};
};

&pcie0 {
	max-link-speed = <1>;
	status = "okay";
};

&pwm {
	pinctrl-names = "default";
	pinctrl-0 = <&pinctrl_pwm4>, <&pinctrl_pwm5>;
};

&sata {
	ports-implemented = <3>;
	status = "okay";
};

&usb3_phy {
	status = "okay";
};

&usb3 {
	dr_mode = "host";
	status = "okay";
};
